
oninya ini adalah contoh API project X, yang sudah diubah dari project sebelumnya
yang menggunakan express dan prisma, untuk menampilkan data dari database postgresql

job search by keyword (title,city,state,country) //DONE ?

job_category // DONE
company // DOONE

job detail (only with id), render only with id // DONE

pagination (membatasi render) //DONE

coba swagger untuk api dokumentasi // DONE



✅ 1. Initialize Git (if not already):
git init

✅ 2. Check Git status (optional):
git status

✅ 3. Stage changes:
Stage everything:
git add .

Or stage specific files:
git add filename.ext

✅ 4. Commit the changes:
git commit -m "Your commit message"

✅ 5. Connect to GitHub repo (if not already connected):
git remote add origin https://github.com/your-username/your-repo.git

✅ 6. Push the changes:
First time (or force push to main branch):
git push -u origin main

For subsequent pushes:
git push

/*jobs.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Job Listings</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .job-card {
      margin-bottom: 1rem;
    }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h2 class="mb-3">Job Listings</h2>
    
    <input type="text" id="searchInput" class="form-control mb-4" placeholder="Search jobs...">

    <div class="row" id="jobContainer"></div>
  </div>

  <script>
    const jobContainer = document.getElementById("jobContainer");
    const searchInput = document.getElementById("searchInput");
    let jobs = [];

    async function fetchJobs() {
      try {
        const response = await fetch("/jobs/filter");
        jobs = await response.json();
        renderJobs(jobs);
      } catch (error) {
        console.error("Error fetching jobs:", error);
      }
    }

    function renderJobs(jobList) {
      jobContainer.innerHTML = "";
      jobList.forEach(job => {
        const jobCard = `
          <div class="col-md-4 job-card">
            <div class="card h-100">
              <div class="card-body">
                <h5 class="card-title">${job.title}</h5>
                <h6 class="card-subtitle mb-2 text-muted">${job.company}</h6>
                <p class="card-text">${job.job_description || ""}</p>
              </div>
              <div class="card-footer">
                <small class="text-muted">${job.company_city}, ${job.company_location}</small><br>
                <small class="text-muted">${job.job_date}</small><br>
                <a href="${job.apply_link}" target="_blank" class="btn btn-primary mt-2">Apply</a>
              </div>
            </div>
          </div>
        `;
        jobContainer.innerHTML += jobCard;
      });
    }

    searchInput.addEventListener("input", () => {
      const keyword = searchInput.value.toLowerCase();
      const filtered = jobs.filter(job =>
        job.title.toLowerCase().includes(keyword) ||
        job.company.toLowerCase().includes(keyword) ||
        job.company_location.toLowerCase().includes(keyword) ||
        job.company_city.toLowerCase().includes(keyword) ||
        job.job_date.toLowerCase().includes(keyword)
      );
      renderJobs(filtered);
    });

    fetchJobs();
  </script>
</body>
</html>

*/

/*schema.prisma
model Product {
  id          Int    @id @default(autoincrement())
  name        String
  price       Int
  description String
  image       String
}

model nation_job {
  id               Int     @id(map: "nation-job_pkey") @default(autoincrement())
  title            String?
  company          String?
  apply_link       String?
  company_location String?
  company_city     String?
  company_country  String?
  job_description  String?
  job_date         String?
}
/*
const express = require("express");
const dotenv = require("dotenv");
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();
const app = express();

// Body parser middleware (add this!)
app.use(express.json()); // <-- Handles JSON requests
app.use(express.urlencoded({ extended: true })); // <-- Handles form submissions

// cara menjalankan server yaitu ketik = "node ." / "nodemon ."
// untuk membuka prisma studio ketik = "npx prisma studio"

dotenv.config();

const PORT = process.env.PORT;

const path = require("path");
//above code, What it does: Imports Node.js's built-in path module.
//Why it matters: It helps us build file paths that work on all systems (Windows, Linux, Mac).


// Serve static files (e.g., product.html)
// Menampilkan file yang ingin diambil, contohnya /products.html
app.use(express.static(path.join(__dirname)));

app.get("", async (req, res) => {
    res.send("CONTOH API PROJECT X, start with /api,   /products, /jobs");
});

app.get("/api", (req, res) => {
    res.send("VECTOR KEREN BANGET DONG");
});
app.get("/id", (req, res) => {
  res.send("INI WEBSITE BERBAHASA INDONESIA");
});
app.get("/en", (req, res) => {
  res.send("this is website in english");
});
/* kalau mau bikin database baru trus dimasukkan ke sini, model database harus ditambahkan di schema.prisma dulu
    bisa buat manual dari schema.prisma atau kalau sudah data database nya bisa langsung di pull saja dari database postgresql
    dengan "npx prisma db pull", baru di generate dengan "npx prisma generate"

*/

//dibawah, get /products
app.get("/products", async (req, res) => {
    res.sendFile(path.join(__dirname, "products.html")); //menampilkan frontend + backend hanya dengan /products (no .html)

    /* untuk menampilkan isi database saja
    const products = await prisma.product.findMany();
    res.send(products);
    */
});
//dibawah, metohd post , agar bisa mem-post(input) ke database products
app.post("/products", async (req, res) => {
    const { name, price, description, image } = req.body;
  
    try {
      const newProduct = await prisma.product.create({
        data: {
          name,
          price: parseFloat(price), // convert string to number
          description,
          image,
        },
      });
      res.status(201).json(newProduct);
    } catch (error) {
      console.error("Error adding product:", error);
      res.status(500).json({ error: "Failed to add product" });
    }
  });
  
  

  // Example Express route to support `?q=...`
  app.get("/products/filter", async (req, res) => {
    const { q } = req.query;
  
    const filters = q
      ? {
          OR: [
            { name: { contains: q, mode: "insensitive" } },
            { description: { contains: q, mode: "insensitive" } },
            {
              price: {
                equals: isNaN(parseFloat(q)) ? undefined : parseFloat(q),
              },
            },
          ],
        }
      : {};
  
    try {
      const products = await prisma.product.findMany({
        where: filters,
      });
      res.json(products);
    } catch (error) {
      console.error("Error filtering products:", error);
      res.status(500).json({ error: "Failed to filter products" });
    }
  });
  
  

app.get("/jobs", async (req, res) => {
  res.sendFile(path.join(__dirname, "jobs.html")); //untuk membuka jobs.html hanya dengan /jobs
  /*
    const jobs = await prisma.nation_job.findMany();
    res.send(jobs);
  */
});


app.get("/jobs/filter", async (req, res) => {
  const { q } = req.query;

  try {
    const where = q
      ? {
          OR: [
            { title: { contains: q, mode: "insensitive" } },
            { company: { contains: q, mode: "insensitive" } },
            { company_location: { contains: q, mode: "insensitive" } },
            { company_city: { contains: q, mode: "insensitive" } },
            { company_country: { contains: q, mode: "insensitive" } },
            { job_date: { contains: q, mode: "insensitive" } }
          ]
        }
      : {};

    const filteredJobs = await prisma.nation_job.findMany({ where });

    res.json(filteredJobs);
  } catch (error) {
    console.error("Error fetching filtered jobs:", error);
    res.status(500).json({ error: "Error fetching filtered jobs" });
  }

  /* // example to fetch all jobs without filter
  app.get("/jobs/filter", async (req, res) => {
  try {
    const jobs = await prisma.nation_job.findMany(); // Fetch all jobs using Prisma
    res.json(jobs);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch jobs" });
  }
});
  */
});



// cara menjalankan server yaitu ketik = "node ." / "nodemon ."
app.listen(PORT, () => {
    console.log("EXPRESS API RUNNING IN PORT: " + PORT);
}); 