generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["companies", "jobs", "locations"]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model company {
  company_id          Int                @id(map: "company_pkey1") @default(autoincrement())
  company_uuid        String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_name        String             @default("Unknown") @db.VarChar(255)
  company_description String?            @db.VarChar(16000)
  company_website     String?            @db.VarChar(1000)
  establishment_date  DateTime?          @db.Date
  company_size        companySizes?
  is_active           Boolean            @default(true)
  company_email       String?            @db.VarChar(320)
  phone_number        String?            @db.VarChar(20)
  company_country_id  Int                @default(99999)
  company_state_id    Int                @default(99999)
  company_city_id     Int                @default(99999)
  created_at          DateTime           @default(now()) @db.Timestamptz(6)
  updated_at          DateTime           @default(now()) @db.Timestamptz(6)
  deleted_at          DateTime?          @db.Timestamptz(6)
  city                city               @relation(fields: [company_city_id], references: [city_id], onDelete: SetDefault, onUpdate: NoAction)
  country             country            @relation(fields: [company_country_id], references: [country_id], onDelete: SetDefault, onUpdate: NoAction)
  state               state              @relation(fields: [company_state_id], references: [state_id], onDelete: SetDefault, onUpdate: NoAction)
  company_image       company_image[]
  company_industry    company_industry[]
  job                 job[]

  @@schema("companies")
}

model company_image {
  company_image_id Int      @id @default(autoincrement())
  company_id       Int
  company_image    String?  @db.VarChar
  is_primary       Boolean  @default(false)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  company          company  @relation(fields: [company_id], references: [company_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([company_id], map: "idx_company_id_image")
  @@schema("companies")
}

model company_industry {
  company_industry_id   Int               @id @default(autoincrement())
  company_industry_uuid String            @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id            Int
  industry_category_id  Int
  created_at            DateTime          @default(now()) @db.Timestamptz(6)
  updated_at            DateTime          @default(now()) @db.Timestamptz(6)
  company               company           @relation(fields: [company_id], references: [company_id], onDelete: Cascade, onUpdate: NoAction)
  industry_category     industry_category @relation(fields: [industry_category_id], references: [industry_category_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([company_id, industry_category_id])
  @@index([company_id], map: "idx_company_industry_id")
  @@index([industry_category_id], map: "idx_industry_category_id")
  @@schema("companies")
}

model industry_category {
  industry_category_id Int                @id @default(autoincrement())
  industry_name        String             @db.VarChar(255)
  created_at           DateTime           @default(now()) @db.Timestamptz(6)
  updated_at           DateTime           @default(now()) @db.Timestamptz(6)
  company_industry     company_industry[]

  @@schema("companies")
}

model job {
  job_id           Int                @id @default(autoincrement())
  job_uuid         String             @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_company      Int
  job_description  String?
  job_name         String             @db.VarChar(255)
  job_posted_date  DateTime           @db.Date
  apply_link       String
  salary_min       Decimal?           @db.Decimal(10, 2)
  salary_max       Decimal?           @db.Decimal(10, 2)
  salary_currency  String?            @default("IDR") @db.Char(3)
  salary_frequency salaryFrequency?   @default(MONTHLY)
  job_status       Boolean            @default(true)
  is_remote        Boolean            @default(false)
  job_country_id   Int                @default(99999)
  job_state_id     Int                @default(99999)
  job_city_id      Int                @default(99999)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  city             city               @relation(fields: [job_city_id], references: [city_id], onDelete: SetDefault, onUpdate: NoAction)
  company          company            @relation(fields: [job_company], references: [company_id], onDelete: Cascade, onUpdate: NoAction)
  country          country            @relation(fields: [job_country_id], references: [country_id], onDelete: SetDefault, onUpdate: NoAction)
  state            state              @relation(fields: [job_state_id], references: [state_id], onDelete: SetDefault, onUpdate: NoAction)
  job_category_map job_category_map[]
  job_salary_map   job_salary_map[]
  job_schedule_map job_schedule_map[]
  job_skill_map    job_skill_map[]
  job_source_map   job_source_map[]
  job_type_map     job_type_map[]

  @@index([job_company], map: "idx_job_company")
  @@schema("jobs")
}

model job_category {
  job_category_id   Int                @id @default(autoincrement())
  job_category_name String             @db.VarChar(255)
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime           @default(now()) @db.Timestamptz(6)
  job_category_map  job_category_map[]

  @@schema("jobs")
}

model job_category_map {
  job_category_map_id   Int          @id @default(autoincrement())
  job_category_map_uuid String       @unique @default(dbgenerated("gen_random_uuid()")) @map(" job_category_map_uuid") @db.Uuid
  job_id                Int
  category_id           Int          @default(99999)
  created_at            DateTime     @default(now()) @db.Timestamptz(6)
  updated_at            DateTime     @default(now()) @db.Timestamptz(6)
  job_category          job_category @relation(fields: [category_id], references: [job_category_id], onDelete: SetNull, onUpdate: NoAction)
  job                   job          @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, category_id])
  @@schema("jobs")
}

model job_salary {
  job_salary_id   Int              @id @default(autoincrement())
  job_salary_name String           @db.VarChar(50)
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @db.Timestamptz(6)
  job_salary_map  job_salary_map[]

  @@schema("jobs")
}

model job_salary_map {
  job_salary_map_id   Int        @id @default(autoincrement())
  job_salary_map_uuid String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id              Int
  salary_id           Int        @default(99999)
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  updated_at          DateTime   @default(now()) @db.Timestamptz(6)
  job                 job        @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  job_salary          job_salary @relation(fields: [salary_id], references: [job_salary_id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([job_id, salary_id])
  @@schema("jobs")
}

model job_schedule {
  job_schedule_id   Int                @id @default(autoincrement())
  job_schedule_name String             @db.VarChar(50)
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime           @default(now()) @db.Timestamptz(6)
  job_schedule_map  job_schedule_map[]

  @@schema("jobs")
}

model job_schedule_map {
  job_schedule_map_id   Int          @id @default(autoincrement())
  job_schedule_map_uuid String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id                Int
  schedule_id           Int          @default(99999)
  created_at            DateTime     @default(now()) @db.Timestamptz(6)
  updated_at            DateTime     @default(now()) @db.Timestamptz(6)
  job                   job          @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  job_schedule          job_schedule @relation(fields: [schedule_id], references: [job_schedule_id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([job_id, schedule_id])
  @@schema("jobs")
}

model job_skill {
  job_skill_id   Int             @id @default(autoincrement())
  job_skill_name String          @unique(map: "unique_job_skill_name") @db.VarChar(150)
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime        @default(now()) @db.Timestamptz(6)
  job_skill_map  job_skill_map[]

  @@schema("jobs")
}

model job_skill_map {
  job_skill_map_id   Int       @id @default(autoincrement())
  job_skill_map_uuid String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id             Int
  skill_id           Int       @default(99999)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  job                job       @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  job_skill          job_skill @relation(fields: [skill_id], references: [job_skill_id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([job_id, skill_id])
  @@schema("jobs")
}

model job_source {
  job_source_id   Int              @id @default(autoincrement())
  job_source_name String           @db.VarChar(250)
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @db.Timestamptz(6)
  job_source_map  job_source_map[]

  @@schema("jobs")
}

model job_source_map {
  job_source_map_id   Int        @id @default(autoincrement())
  job_source_map_uuid String     @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id              Int
  source_id           Int        @default(99999)
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  updated_at          DateTime   @default(now()) @db.Timestamptz(6)
  job                 job        @relation(fields: [job_id], references: [job_id], onDelete: SetDefault, onUpdate: NoAction)
  job_source          job_source @relation(fields: [source_id], references: [job_source_id], onDelete: SetDefault, onUpdate: NoAction)

  @@unique([job_id, source_id])
  @@schema("jobs")
}

model job_type {
  job_type_id   Int            @id @default(autoincrement())
  job_type_name String         @db.VarChar(255)
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @db.Timestamptz(6)
  job_type_map  job_type_map[]

  @@schema("jobs")
}

model job_type_map {
  job_type_map_id   Int      @id @default(autoincrement())
  job_type_map_uuid String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id            Int
  type_id           Int      @default(99999)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)
  job               job      @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  job_type          job_type @relation(fields: [type_id], references: [job_type_id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([job_id, type_id])
  @@schema("jobs")
}

model city {
  city_id    Int       @id(map: "cities_pkey") @default(autoincrement())
  city_name  String    @db.VarChar(255)
  state_id   Int       @default(99999)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  company    company[]
  job        job[]
  state      state     @relation(fields: [state_id], references: [state_id], onDelete: Cascade, onUpdate: NoAction, map: "cities_state_id_fkey")

  @@unique([city_name, state_id])
  @@index([state_id], map: "idx_city_state_id")
  @@schema("locations")
}

model country {
  country_id   Int       @id @default(autoincrement())
  country_name String    @db.VarChar(255)
  country_code String    @unique @default(dbgenerated("99999")) @db.Char(3)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)
  company      company[]
  job          job[]
  state        state[]

  @@schema("locations")
}

model state {
  state_id   Int       @id(map: "states_pkey") @default(autoincrement())
  state_name String    @db.VarChar(255)
  state_code String?   @db.VarChar(10)
  country_id Int       @default(99999)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  company    company[]
  job        job[]
  city       city[]
  country    country   @relation(fields: [country_id], references: [country_id], onDelete: Cascade, onUpdate: NoAction, map: "states_country_id_fkey")

  @@unique([state_code, country_id])
  @@index([country_id], map: "idx_state_country_id")
  @@schema("locations")
}

enum companySizes {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE

  @@schema("companies")
}

enum salaryFrequency {
  MONTHLY
  YEARLY
  PROGRESSIVE

  @@schema("jobs")
}
